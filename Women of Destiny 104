<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Course Access — Enter Password</title>
  <style>
    :root{
      --bg:#f5f0e6;
      --card:#800000;
      --accent:#a00000;
      --muted:#f0e6d2;
      --glass: rgba(255,255,255,0.1);
      --radius:16px; --maxw:520px;
      color-scheme: light;
    }
    *{box-sizing:border-box}
    html,body{height:100%; margin:0;}
    body{
      font-family:Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      background: linear-gradient(135deg, #f5f0e6, #e6d9c3);
      display:flex; justify-content:center; align-items:center; padding:32px;
    }
    .card{
      width:100%; max-width:var(--maxw); background: var(--card);
      border-radius:var(--radius); padding:28px; box-shadow: 0 12px 40px rgba(0,0,0,0.4); backdrop-filter: blur(6px);
      border:1px solid rgba(255,255,255,0.1);
    }
    h1, p{margin:0; color:var(--muted);}
    h1{margin-bottom:10px; font-size:22px;}
    p.lead{margin-bottom:20px;}
    form{display:grid; gap:12px;}
    .input-row{display:flex; gap:8px;}
    input[type=password]{flex:1;padding:12px 14px;border-radius:10px;border:1px solid rgba(0,0,0,0.2);background:var(--glass);color:var(--muted);font-size:15px;}
    .btn{display:inline-flex;align-items:center;gap:8px;padding:10px 14px;border-radius:10px;border:none;background:linear-gradient(90deg,var(--accent),#b22222);color:var(--muted);font-weight:600;cursor:pointer;transition: all 0.2s ease;}
    .btn:hover{background:linear-gradient(90deg,#b22222,#a00000);box-shadow:0 0 10px rgba(255,200,150,0.4);}
    .btn:active{transform:translateY(1px);}
    .controls{display:flex;justify-content:space-between;margin-top:6px;}
    .small{font-size:13px;color:var(--muted);}
    .show-toggle{background:transparent;border:0;color:var(--muted);cursor:pointer;}
    .msg{padding:10px;border-radius:8px;font-size:14px;}
    .msg.error{background:rgba(255,80,80,0.08);color:#ffb4b4;border:1px solid rgba(255,80,80,0.08);}
    .msg.success{background:rgba(70,200,120,0.08);color:#bff3d2;border:1px solid rgba(70,200,120,0.06);}
    footer{margin-top:18px;color:var(--muted);font-size:13px;text-align:center;}
    @media(max-width:520px){.card{padding:20px;}}
  </style>
</head>
<body>
  <main class="card" role="main" aria-labelledby="title">
    <header>
      <h1 id="title">Enter password to access the course</h1>
      <p class="lead">This page protects your course content. Type the password provided to you. If you don't have it, contact the course owner.</p>
    </header>
    <form id="passForm" aria-describedby="status">
      <label for="password" class="small">Course password</label>
      <div class="input-row">
        <input id="password" type="password" placeholder="••••••••" required autofocus />
        <button type="button" class="btn" id="unlockBtn">Unlock</button>
      </div>
      <div class="controls">
        <div class="small">Attempts left: <span id="attempts">5</span></div>
        <button type="button" class="show-toggle small" id="toggleShow">Show</button>
      </div>
      <div id="status" aria-live="polite" style="margin-top:12px"></div>
      <p class="hint" style="margin-top:8px">Tip: for stronger protection, use server-side authentication.</p>
    </form>
    <footer>© Course Name — protected page</footer>
  </main>
  <script>
    const config = {
      password: 'Awaken104',
      successRedirect: 'https://app.eu.safetyculture.com/training/course-preview/p/p2fqqWX0HByKSDcy7KmOIEko',
      maxAttempts: 5,
      lockoutMinutes: 15
    };

    const passInput = document.getElementById('password');
    const unlockBtn = document.getElementById('unlockBtn');
    const status = document.getElementById('status');
    const attemptsEl = document.getElementById('attempts');
    const toggleShow = document.getElementById('toggleShow');

    let state = {attemptsLeft: config.maxAttempts, lockedUntil: null};

    function updateUI(){
      const now = Date.now();
      if(state.lockedUntil && now < state.lockedUntil){
        const mins = Math.ceil((state.lockedUntil - now)/60000);
        status.innerHTML = `<div class='msg error'>Too many wrong attempts. Try again in ${mins} minute(s).</div>`;
        passInput.disabled = true; unlockBtn.disabled = true; attemptsEl.textContent=0;
        return;
      }
      passInput.disabled=false; unlockBtn.disabled=false; attemptsEl.textContent=state.attemptsLeft;
      status.innerHTML='';
    }

    updateUI();

    toggleShow.addEventListener('click',()=>{
      passInput.type = passInput.type==='password'?'text':'password';
      toggleShow.textContent = passInput.type==='password'?'Show':'Hide';
      passInput.focus();
    });

    unlockBtn.addEventListener('click',()=>{
      if(state.lockedUntil && Date.now()<state.lockedUntil){updateUI(); return;}
      const pw = passInput.value.trim();
      if(!pw){ status.innerHTML="<div class='msg error'>Please enter a password.</div>"; return;}
      if(pw===config.password){
        status.innerHTML="<div class='msg success'>Password correct — redirecting…</div>";
        state.attemptsLeft=config.maxAttempts; state.lockedUntil=null;
        setTimeout(()=>{window.location.href=config.successRedirect;},800);
      } else {
        state.attemptsLeft=Math.max(0,state.attemptsLeft-1);
        if(state.attemptsLeft<=0){ state.lockedUntil=Date.now()+config.lockoutMinutes*60000;
          status.innerHTML=`<div class='msg error'>Too many wrong attempts. Locked for ${config.lockoutMinutes} minutes.</div>`;
        } else {status.innerHTML=`<div class='msg error'>Password incorrect. ${state.attemptsLeft} attempt(s) left.</div>`;}
      }
      updateUI();
    });

    passInput.addEventListener('keydown',e=>{if(e.key==='Enter'){e.preventDefault(); unlockBtn.click();}});

    /* Deployment Options:
      - Netlify: Drag & Drop folder or connect Git repo
      - Vercel: Import Git repo or upload static files
      - GitHub Pages: Push to repo and enable Pages
      - Surge.sh: `surge ./foldername`
      - Firebase Hosting: `firebase deploy` after init
      - Render.com: Deploy static site
      - AWS S3 + CloudFront: Host static site with optional HTTPS
    */
  </script>
</body>
</html>
